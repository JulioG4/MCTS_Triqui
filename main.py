#!/usr/bin/env python3
"""
Juego de Triqui (Tic-Tac-Toe) con MCTS
Juega contra la computadora que usa Monte Carlo Tree Search
"""

from triqui import TicTacToeBoard, Player
from mcts import MCTS

class TriquiGame:
    def __init__(self):
        self.board = TicTacToeBoard()
        self.mcts = MCTS(self.board, Player.MACHINE)
        self.game_over = False

    def print_instructions(self):
        print("="*50)
        print("     ¬°BIENVENIDO AL TRIQUI CON MCTS!")
        print("="*50)
        print("\nInstrucciones:")
        print("- T√∫ eres X, MCTS es O")
        print("- Ingresa el n√∫mero de la posici√≥n donde quieres jugar (0-8)")
        print("- Las posiciones est√°n numeradas as√≠:")
        print("\n 0 | 1 | 2 ")
        print("___|___|___")
        print(" 3 | 4 | 5 ")
        print("___|___|___")
        print(" 6 | 7 | 8 ")
        print("   |   |   ")
        
        while True:
            ready = input("\n¬øEst√°s listo para jugar? (s/n): ").lower().strip()
            if ready in ['s', 'si', 's√≠', 'y', 'yes']:
                break
            elif ready in ['n', 'no']:
                print("¬°Est√° bien! Presiona Enter cuando est√©s listo...")
                input()
                continue
            else:
                print("Por favor responde 's' para s√≠ o 'n' para no.")

        print("\n¬°Empecemos!\n")

    def get_human_move(self):
        while True:
            try:
                self.board.print_board()
                print(f"\nPosiciones disponibles: {self.board.get_legal_positions()}")
                move = input("Ingresa tu movimiento (0-8) o 'q' para salir: ").strip()
                
                if move.lower() == 'q':
                    return None
                
                move = int(move)
                if 0 <= move <= 8:
                    if self.board.human_make_move(move):
                        return move
                    else:
                        print("¬°Esa posici√≥n ya est√° ocupada!")
                else:
                    print("¬°Por favor ingresa un n√∫mero entre 0 y 8!")
            except ValueError:
                print("¬°Por favor ingresa un n√∫mero v√°lido!")

    def make_machine_move(self, show_analysis=False):
        print("\nLa m√°quina est√° pensando...")
        
        # MCTS para el estado actual
        current_mcts = MCTS(self.board.copy(), Player.MACHINE)
        result = current_mcts.run_search(iterations=1000, show_progress=show_analysis)
        
        if result and result["move"]:
            move = result["move"]
            print(f"La m√°quina juega en la posici√≥n {move.position}")
            self.board.make_move(move)
            return True
        
        return False

    def check_game_over(self):
        winner = self.board.check_win()
        
        if winner == "h":
            self.board.print_board()
            print("\nüéâ ¬°FELICIDADES! ¬°Le has ganado a MCTS!")
            return True
        elif winner == "m":
            self.board.print_board()
            print("\nMCTS ha ganado. ¬°Mejor suerte la pr√≥xima vez!")
            return True
        elif winner == "v":
            self.board.print_board()
            print("\nü§ù ¬°Es un empate! Buen juego.")
            return True
        
        return False

    def play(self):
        self.print_instructions()
        
        # Pregunta si quiere ver el an√°lisis de MCTS
        while True:
            analysis = input("¬øQuieres ver el an√°lisis detallado de MCTS en cada jugada? (s/n): ").lower().strip()
            if analysis in ['s', 'si', 's√≠', 'y', 'yes']:
                show_analysis = True
                break
            elif analysis in ['n', 'no']:
                show_analysis = False
                break
            else:
                print("Por favor responde 's' para s√≠ o 'n' para no.")
        
        while not self.game_over:
            # Turno del humano
            human_move = self.get_human_move()
            if human_move is None:
                print("¬°Gracias por jugar!")
                return
            
            # Verificar si el juego termin√≥ despu√©s del movimiento humano
            if self.check_game_over():
                break
            
            # Turno de la m√°quina
            if not self.make_machine_move(show_analysis):
                print("Error: La m√°quina no pudo hacer un movimiento.")
                break
            
            # Verificar si el juego termin√≥ despu√©s del movimiento de la m√°quina
            if self.check_game_over():
                break

    def play_again(self):
        while True:
            choice = input("\n¬øQuieres jugar otra vez? (s/n): ").strip().lower()
            if choice in ['s', 'si', 's√≠', 'y', 'yes']:
                return True
            elif choice in ['n', 'no']:
                return False
            else:
                print("Por favor responde 's' para s√≠ o 'n' para no.")

def main():
    print("Iniciando el juego de Triqui con MCTS...")
    
    while True:
        game = TriquiGame()
        game.play()
        
        if not game.play_again():
            print("\n¬°Gracias por jugar Triqui con MCTS!")
            break

if __name__ == "__main__":
    main()
